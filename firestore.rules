/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data,
 *              shared access control for collaborative data, and public read access
 *              with owner-only writes for community-generated content.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user account information.
 * - /user_profiles/{profileId}: Stores public user profile information.
 * - /users/{userId}/projects/{projectId}: Stores projects owned by a specific user.
 * - /chats/{chatId}: Stores metadata about chats.
 * - /chats/{chatId}/messages/{messageId}: Stores messages within a specific chat.
 * - /statuses/{statusId}: Stores status updates.
 * - /channels/{channelId}: Stores metadata about channels.
 * - /channels/{channelId}/messages/{messageId}: Stores messages within a specific channel.
 * - /users/{userId}/callLogs/{callLogId}: Stores call logs for a specific user.
 *
 * Key Security Decisions:
 * - User data is strictly owned by the authenticated user.
 * - Listing all users is disallowed.
 * - Public read access is granted to certain collections (e.g., statuses), but writes are restricted to owners.
 * - All write operations require authentication.
 * - Data consistency between paths and document data is enforced where applicable.
 *
 * Denormalization for Authorization:
 * - The `Project` entity includes a `userId` field to denote ownership, avoiding extra reads.
 * - Statuses denormalize `userName` and `userAvatar` to avoid extra lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is the owner of the resource and the resource exists.
      * @param {string} userId The user ID to compare against the authenticated user's ID.
      * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own user document.
     * @deny (create) User attempts to create a document for another user.
     * @allow (get, list, update, delete) Signed-in user accesses their own user document.
     * @deny (get, list, update, delete) User attempts to access another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of all users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /user_profiles/{profileId}
     * @allow (create) Signed-in user creates their own user profile document.
     * @deny (create) User attempts to create a document for another user.
     * @allow (get, list, update, delete) Signed-in user accesses their own user profile document.
     * @deny (get, list, update, delete) User attempts to access another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /user_profiles/{profileId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == profileId;
      allow update: if isSignedIn() && request.auth.uid == profileId;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for projects within a user's data tree.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) Signed-in user creates a project under their own user ID.
     * @deny (create) User attempts to create a project under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own projects.
     * @deny (get, list, update, delete) User attempts to access another user's projects.
     * @principle Restricts access to a user's own project data.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages shared access to chat documents based on participant list.
     * @path /chats/{chatId}
     * @allow (get, list) Any participant can read the chat metadata.
     * @allow (create) Any signed-in user can create a chat.
     * @allow (update, delete) Only participants can modify the chat metadata.
     * @principle Enforces shared access based on participant list.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow delete: if false;
    }

    /**
     * @description Manages access to messages within a specific chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) Any participant of the chat can read messages.
     * @allow (create) Any signed-in user can create a message in the chat.
     * @allow (update, delete) No one can update or delete messages.
     * @principle Enforces access to messages based on chat participation.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to statuses with owner-only writes.
     * @path /statuses/{statusId}
     * @allow (get, list) Anyone can read statuses.
     * @allow (create) Only signed-in users can create statuses, with matching authorId.
     * @allow (update, delete) Only the owner can modify or delete their own status.
     * @principle Enables public read access with owner-only writes.
     */
    match /statuses/{statusId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows management of Channels.
     * @path /channels/{channelId}
     */
    match /channels/{channelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages access to messages within a specific channel.
     * @path /channels/{channelId}/messages/{messageId}
     */
    match /channels/{channelId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for call logs within a user's data tree.
     * @path /users/{userId}/callLogs/{callLogId}
     * @allow (create) Signed-in user creates a call log under their own user ID.
     * @deny (create) User attempts to create a call log under another user's ID.
     * @allow (get, list, update, delete) Signed-in user accesses their own call logs.
     * @deny (get, list, update, delete) User attempts to access another user's call logs.
     * @principle Restricts access to a user's own call log data.
     */
    match /users/{userId}/callLogs/{callLogId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}