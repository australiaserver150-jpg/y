/**
 * @description This ruleset enforces a strict user-ownership model for ConnectNow, with denormalization
 *              to avoid complex queries in security rules.
 * @dataStructure
 *  - /users/{userId}: Stores user account information, accessible only to the user.
 *  - /user_profiles/{profileId}: Stores user profile information, accessible to the associated user.
 *  - /users/{userId}/projects/{projectId}: Stores project data, owned by the user.
 *  - /users/{userId}/projects/{projectId}/messages/{messageId}: Stores messages within a project,
 *    accessible only to the project owner.
 * @keySecurityDecisions
 *  - Users can only access their own data.
 *  - Projects and messages are owned by the user who created the parent project.
 *  - List operations are restricted to the owner for user-scoped collections.
 * @denormalizationForAuthorization The 'userId' field is stored in Project documents to easily check
 *                                 ownership without additional reads. Message documents include
 *                                 'projectId' and 'senderId' for similar reasons.
 * @structuralSegregation User data and profile data are stored in separate collections to allow
 *                         for different access control requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user account information. Only the user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a document at /users/user_abc with matching id.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can access their own document at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a document at /users/user_abc.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot access document at /users/user_abc.
     * @principle Enforces document ownership for all operations on user data.
     */
    match /users/{userId} {
      // isOwner(userId) checks if the request is made by the user whose ID matches the userId.
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user profile information. Only the associated user can read and write their own profile.
     * @path /user_profiles/{profileId}
     * @allow (create) - User with UID 'user_abc' can create a document at /user_profiles/profile_abc with matching id.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can access their own document at /user_profiles/profile_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a document at /user_profiles/profile_abc.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot access document at /user_profiles/profile_abc.
     * @principle Enforces document ownership for all operations on user profile data.
     */
    match /user_profiles/{profileId} {
      allow get, list: if isSignedIn(); // Allow all signed-in users to read profiles
      allow create: if isSignedIn() && request.resource.data.id == profileId;
      allow update: if isSignedIn() && request.resource.data.id == resource.data.id; // Enforce immutability of profileId
      allow delete: if false; // User profiles cannot be deleted
    }

    /**
     * @description Manages project data. Only the owning user can create, read, update, and delete projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User with UID 'user_abc' can create a project under /users/user_abc/projects/project_xyz if project.userId == 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can access their own project at /users/user_abc/projects/project_xyz.
     * @deny (create) - User with UID 'user_xyz' cannot create a project under /users/user_abc/projects/project_xyz.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot access project at /users/user_abc/projects/project_xyz.
     * @principle Enforces document ownership for all operations on project data.
     */
    match /users/{userId}/projects/{projectId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages messages within a project. Only the owning user can create, read, update, and delete messages.
     * @path /users/{userId}/projects/{projectId}/messages/{messageId}
     * @allow (create) - User with UID 'user_abc' can create a message in their project if message.projectId matches the path.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can access messages in their own project.
     * @deny (create) - User with UID 'user_xyz' cannot create a message in project owned by 'user_abc'.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot access messages in project owned by 'user_abc'.
     * @principle Enforces document ownership and validates relational integrity.
     */
    match /users/{userId}/projects/{projectId}/messages/{messageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.projectId == projectId && request.resource.data.senderId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == projectId && request.resource.data.senderId == resource.data.senderId; // Enforce immutability of senderId and projectId
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---

    // isSignedIn() returns true if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // isOwner(userId) returns true if the request is authenticated and the user ID matches the requested document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // isExistingOwner(userId) returns true if the user is signed in, is the owner, and the resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}