/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model. Each user has full access to their own profile data.
 * Chats are only accessible to logged-in users.
 *
 * Data Structure:
 * - `/user_profiles/{userId}`: Stores public user profile information, accessible only by the user themselves.
 * - `/friendRequests/{requestId}`: Stores friend requests, accessible only by authenticated users.
 * - `/chats/{chatId}`: Stores chat conversations, accessible only by authenticated users.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no top-level `/users` collection with `list` enabled).
 * - Data shape validation is relaxed to allow for rapid prototyping. Only authorization-critical fields are validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owner can read and write.
     * @path /user_profiles/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /user_profiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects friend requests, ensuring only authenticated users can manage them.
     * @path /friendRequests/{requestId}
     * @allow (read, write) if request.auth != null
     * @deny (read, write) if request.auth == null
     * @principle Requires authentication for all operations.
     */
    match /friendRequests/{requestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Protects chat conversations, ensuring only authenticated users can participate.
     * @path /chats/{chatId}
     * @allow (read, write) if request.auth != null
     * @deny (read, write) if request.auth == null
     * @principle Requires authentication for all operations.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Fallback rule: deny all access to paths not explicitly defined.
     * @path /
     * @deny (read, write) always
     * @principle Provides a default-deny policy for undefined paths.
     */
    match /{path=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}