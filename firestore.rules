/**
 * @file Firebase Security Rules for ConnectNow Application
 *
 * @core_philosophy This ruleset enforces a user-ownership model for private user data,
 * while allowing public read access to shared content. It leverages path-based
 * authorization and denormalization to optimize security and performance.
 *
 * @data_structure The data is organized hierarchically with user-specific data nested
 * under `/users/{userId}`. Publicly readable data, such as chats and statuses,
 * resides in top-level collections like `/chats/{chatId}` and `/statuses/{statusId}`.
 * Projects are nested under users: `/users/{userId}/projects/{projectId}`
 *
 * @key_security_decisions
 *   - User data is strictly controlled by user ID matching (`isOwner(userId)`).
 *   - Public read access is granted to the `chats` and `statuses` collections.
 *   - Write access to public collections is restricted to authenticated users and requires
 *     validation of ownership fields.
 *   - Listing all users is disallowed.
 *
 * @denormalization_for_authorization User names and avatars are denormalized into
 * Status documents to avoid additional reads during status listing. Ownership is
 * denormalized into Project documents to enforce owner-only writes without extra `get()` calls.
 *
 * @structural_segregation Private user data (call logs, projects) is stored in a user-specific
 * subcollection (`/users/{userId}/...`) to ensure only the owning user can access it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the userId.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource, and that the resource exists.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {bool} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Root-level rule to prevent listing all users.
     * @path /users
     * @allow None
     * @deny list
     * @principle Prevents unauthorized enumeration of user accounts.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user-specific data (e.g., callLogs, settings, etc.).
     * @path /users/{userId}/{document=**}
     * @allow (read) User with UID 'user123' can read their own settings.
     * @allow (write) User with UID 'user123' can update their own profile.
     * @deny (read) User with UID 'user456' cannot read data under /users/user123/.
     * @deny (write) User with UID 'user456' cannot modify data under /users/user123/.
     * @principle Enforces strict user-ownership for private data.
     */
    match /users/{userId}/{document=**} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for individual user documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @allow (get) User with UID 'user123' can get their own user document.
     * @allow (update) User with UID 'user123' can update their own user document.
     * @allow (delete) User with UID 'user123' can delete their own user document.
     * @deny (read) User with UID 'user456' cannot read User data from user with id user123
     * @deny (write) User with UID 'user456' cannot modify User data from user with id user123
     * @principle Enforces that only the authenticated user can create/read/update/delete their own document.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for individual user profiles.
     * @path /user_profiles/{profileId}
     * @allow (read) Any signed in user can read user profiles.
     * @allow (create) User with UID 'user123' can create their own user profile.
     * @deny (write) User with UID 'user456' cannot modify profile data from user with id user123
     * @principle Enforces that only the authenticated user can create their own profile document.
     */
    match /user_profiles/{profileId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.id;
        allow update: if isSignedIn() && resource.data.id == request.resource.data.id;
        allow delete: if false;
    }

    /**
     * @description Manages project data for a specific user.
     * @path /users/{userId}/projects/{projectId}
     * @allow (read) User with UID 'user123' can read their own project data.
     * @allow (create) User with UID 'user123' can create a project under their user ID.
     * @deny (write) User with UID 'user456' cannot modify project data under /users/user123/.
     * @principle Enforces strict user-ownership for project data.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows all logged-in users to read and write to shared chats.
     * @path /chats/{chatId}
     * @allow (read) Any logged-in user can read chat messages.
     * @allow (write) Any logged-in user can write new chat messages.
     * @deny (write) Unauthenticated users cannot write to chats.
     * @principle Provides public read access with authenticated-user-only writes for shared chats.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages messages within a specific chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read) Any logged-in user can read messages in a chat.
     * @allow (create) Any logged-in user can create a message in a chat.
     * @deny (write) Unauthenticated users cannot write messages.
     * @principle Provides public read access with authenticated-user-only writes for chat messages.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages status posts, allowing public read access and owner-only writes.
     *
     * @path /statuses/{statusId}
     * @allow (read) Any user can read status posts.
     * @allow (create) User with UID 'user123' can create a status post with authorId 'user123'.
     * @deny (write) User with UID 'user456' cannot modify status post created by 'user123'.
     * @principle Allows public reading of statuses while enforcing owner-only control for writes.
     */
    match /statuses/{statusId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Manages broadcast channels.
     * @path /channels/{channelId}
     * @allow (read) Any authenticated user can read channel metadata.
     * @allow (create) Any authenticated user can create a channel.
     * @principle Allows public reading of channels while enforcing owner-only control for writes.
     */
    match /channels/{channelId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Manages messages within a specific channel.
      * @path /channels/{channelId}/messages/{messageId}
      * @allow (read) Any logged-in user can read messages in a channel.
      * @allow (create) Any logged-in user can create a message in a channel.
      * @principle Allows read and create access to messages within a channel for logged in users
      */
     match /channels/{channelId}/messages/{messageId} {
       allow get: if isSignedIn();
       allow list: if isSignedIn();
       allow create: if isSignedIn();
       allow update: if false;
       allow delete: if false;
     }

    /**
     * @description Manages call logs for a specific user.
     * @path /users/{userId}/callLogs/{callLogId}
     * @allow (read) User with UID 'user123' can read their own call logs.
     * @allow (create) User with UID 'user123' can create a call log under their user ID.
     * @deny (write) User with UID 'user456' cannot modify call log data under /users/user123/.
     * @principle Enforces strict user-ownership for call log data.
     */
    match /users/{userId}/callLogs/{callLogId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}