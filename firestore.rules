/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of user-ownership and shared-access models to protect data in the ConnectNow application.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user account information, accessible only to the user themselves.
 * - /user_profiles/{profileId}: Stores public user profile data. Read access is public, but write access is restricted.
 * - /users/{userId}/projects/{projectId}: Stores project data owned by a specific user.
 * - /chats/{chatId}: Stores chat metadata, accessible to participants.
 * - /chats/{chatId}/messages/{messageId}: Stores messages within a chat, accessible to chat participants.
 * - /statuses/{statusId}: Stores status posts, publicly readable but writable only by the owner.
 * - /channels/{channelId}: Stores broadcast channel metadata.
 * - /channels/{channelId}/messages/{messageId}: Stores messages within a broadcast channel.
 * - /callLogs/{callLogId}: Stores call history logs, accessible to participants.
 *
 * Key Security Decisions:
 * - User data is strictly private (owner-only access).
 * - Public read access is enabled for user profiles and statuses.
 * - Shared access is enforced for chats and call logs using a 'participants' array.
 *
 * Denormalization for Authorization:
 * - Chat documents contain a 'participants' array of user IDs for easy authorization.
 * - Status documents contain denormalized user information (userName, userAvatar) for display purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (read, write) if the request is made by the user with matching userId (isOwner).
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to user profile documents, but restricts write access.
     * @path /user_profiles/{profileId}
     * @allow (get, list) anyone can read profile.
     * @deny (create, update, delete) only the user with the matching profileId can write.
     * @principle Public read, owner-only write access.
     */
    match /user_profiles/{profileId} {
      function isOwner(profileId) {
        return request.auth != null && request.auth.uid == profileId;
      }
      allow get, list: if true;
      allow create: if request.auth.uid == profileId;
      allow update: if isOwner(profileId);
      allow delete: if isOwner(profileId);
    }

    /**
     * @description Allows access to project documents based on user ownership.
     * @path /users/{userId}/projects/{projectId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows access to chat documents based on participant list.
     * @path /chats/{chatId}
     * @allow (read, write) if the requesting user is in the 'participants' array.
     * @deny (read, write) if the requesting user is not in the 'participants' array.
     * @principle Enforces shared access based on explicit membership.
     */
    match /chats/{chatId} {
      function isParticipant() {
        return request.auth != null && 'participants' in resource.data && resource.data.participants is list && resource.data.participants.hasAny([request.auth.uid]);
      }
      allow get, list: if isParticipant();
      allow create, update, delete: if isParticipant();
    }

    /**
     * @description Allows access to message documents based on chat participant list.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, write) if the requesting user is a participant in the parent chat.
     * @deny (read, write) if the requesting user is not a participant in the parent chat.
     * @principle Enforces shared access based on membership in the parent chat.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isParticipant() {
        return request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
      allow get, list, create, update, delete: if isParticipant();
    }

    /**
     * @description Allows public read access to status documents, but restricts write access to the owner.
     * @path /statuses/{statusId}
     * @allow (get, list) anyone can read statuses.
     * @allow (create) only the user creating the status and the status has the correct userId.
     * @allow (update, delete) only the user who owns the status can modify it.
     * @principle Public read, owner-only write access.
     */
    match /statuses/{statusId} {
      function isOwner() {
        return request.auth != null && 'userId' in resource.data && resource.data.userId == request.auth.uid;
      }
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Allows access to channel documents.
     * @path /channels/{channelId}
     */
    match /channels/{channelId} {
        function isOwner() {
            return request.auth != null && 'ownerId' in resource.data && resource.data.ownerId == request.auth.uid;
        }

        function isMember() {
            return request.auth != null && 'memberIds' in resource.data && resource.data.memberIds is list && resource.data.memberIds.hasAny([request.auth.uid]);
        }

        allow get: if isMember() || isOwner();
        allow list: if true;
        allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
        allow update: if isOwner();
        allow delete: if isOwner();
    }

    /**
     * @description Allows access to channel messages based on channel membership.
     * @path /channels/{channelId}/messages/{messageId}
     */
    match /channels/{channelId}/messages/{messageId} {
        function isMember() {
          return request.auth != null && get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds.hasAny([request.auth.uid]);
        }
        allow get, list, create: if isMember();
        allow update: if false;
        allow delete: if false;
    }
    /**
     * @description Allows access to call log documents based on participant list.
     * @path /callLogs/{callLogId}
     * @allow (read, write) if the requesting user is in the 'participantIds' array.
     * @deny (read, write) if the requesting user is not in the 'participantIds' array.
     * @principle Enforces shared access based on explicit membership.
     */
    match /callLogs/{callLogId} {
      function isParticipant() {
        return request.auth != null && 'participantIds' in resource.data && resource.data.participantIds is list && resource.data.participantIds.hasAny([request.auth.uid]);
      }

      allow get, list: if isParticipant();
      allow create, update, delete: if isParticipant();
    }
  }
}