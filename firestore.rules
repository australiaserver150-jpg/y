/**
 * @file Firebase Security Rules for ConnectNow Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and a combination of ownership and shared access for collaborative resources like projects.  It prioritizes security and simplicity, allowing for rapid prototyping.
 * @data_structure The data is organized hierarchically under `/users/{userId}` for personal data (profile, messages) and at the top level `/projects/{projectId}` for shared project data. A redundant `/users/{userId}/projects/{projectId}` subcollection is used to enable efficient listing of user-owned projects.
 * @key_security_decisions
 *   - User profiles and messages are strictly private and accessible only to the owning user.
 *   - Projects can be created and managed by their owners.
 *   - Listing of projects owned by a user is enabled via the `/users/{userId}/projects/{projectId}` collection.
 *   - No user listing is allowed.
 * @denormalization The `ownerId` field is denormalized directly into the `/projects/{projectId}` document to enable fast ownership checks without additional reads. The `googleAnalyticsEnabled` is not protected by any rules, so it can be changed by anyone.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles to allow only the owner to read and write.
     * @path /users/{userId}/profile
     * @allow (get, update, delete) User with matching userId can access their profile.
     * @allow (create) User with matching userId can create their profile.
     * @deny (get, update, delete) User with mismatched userId cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profile {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.id == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of profiles

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure chat messages to allow only the owner to read and write.
     * @path /users/{userId}/messages/{messageId}
     * @allow (get, update, delete) User with matching userId can access their messages.
     * @allow (create) User with matching userId can create their messages.
     * @deny (get, update, delete) User with mismatched userId cannot access another user's messages.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.senderId == request.auth.uid;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure projects to allow only the owner to read and write.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read project data.
     * @allow (create) User can create a project if they are the owner.
     * @allow (update, delete) Only the owner can update or delete a project.
     * @deny (create, update, delete) Non-owners cannot create, update, or delete projects.
     * @principle Public read access with owner-only writes.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.ownerId;
      }
      
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Secure user-specific project references for listing.
     * @path /users/{userId}/projects/{projectId}
     * @allow (get, list) The user can access their project references.
     * @allow (create) The user can create project references.
     * @allow (update, delete) Only the owner can update or delete a project reference.
     * @deny (get, list, create, update, delete) Other users cannot access or modify project references.
     * @principle Enforces path-based ownership and validates relational integrity.
     */
    match /users/{userId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}