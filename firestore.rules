/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and shared-access models.
 * Users have full control over their own profile data.
 * Chats and calls are secured based on participant lists.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user.
 * - /chats/{chatId}: Chat metadata, accessible to participants.
 * - /chats/{chatId}/messages/{messageId}: Chat messages, accessible to participants.
 * - /calls/{callId}: Call metadata, accessible to participants.
 * - /calls/{callId}/candidates/{candidateId}: ICE candidates for calls, accessible to participants.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Chat and call data access is restricted to participants.
 * - Listing users is disallowed.
 * - Profile picture can not be changed.
 *
 * Denormalization for Authorization:
 *  - Chats and calls denormalize the list of participants directly on the document,
 *    avoiding the need for complex lookups.
 *
 * Structural Segregation:
 *  - No public vs. private data segregation is needed in this model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can read/update/delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read/update/delete the profile at /users/user_abc.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId)
                   && request.resource.data.id == resource.data.id
                   && request.resource.data.profilePicture == resource.data.profilePicture;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure chat metadata. Access is granted to participants only.
     * @path /chats/{chatId}
     * @allow (get, list) User 'user_abc' can read chat metadata if they are a participant.
     * @allow (create) User 'user_abc' can create a chat if they are a participant.
     * @allow (update, delete) User 'user_abc' can update/delete chat metadata if they are a participant.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access chat metadata if they are not a participant.
     * @principle Enforces shared access based on the participants list.
     */
    match /chats/{chatId} {
      function isParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participants;
      }
      function isCreatingParticipant() {
        return request.auth != null && request.auth.uid in request.resource.data.participants;
      }
      function isExistingParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participants && resource != null;
      }

      allow get, list: if isParticipant();
      allow create: if isCreatingParticipant();
      allow update: if isExistingParticipant();
      allow delete: if isExistingParticipant();
    }

    /**
     * @description Secure chat messages. Access is granted to participants of the parent chat only.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) User 'user_abc' can read a chat message if they are a participant in the parent chat.
     * @allow (create) User 'user_abc' can create a chat message if they are a participant in the parent chat.
     * @allow (update, delete) Not allowed to update/delete messages.
     * @deny (get, list, create) User 'user_xyz' cannot access a chat message if they are not a participant in the parent chat.
     * @principle Enforces shared access based on the participants list of the parent chat.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isParentParticipant() {
        return request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }

      allow get, list: if isParentParticipant();
      allow create: if isParentParticipant();
      allow update, delete: if false;
    }

    /**
     * @description Secure call metadata. Access is granted to participants only.
     * @path /calls/{callId}
     * @allow (get, list) User 'user_abc' can read call metadata if they are a participant.
     * @allow (create) User 'user_abc' can create a call if they are a participant.
     * @allow (update, delete) User 'user_abc' can update/delete call metadata if they are a participant.
     * @deny (get, list, create, update, delete) User 'user_xyz' cannot access call metadata if they are not a participant.
     * @principle Enforces shared access based on the participants list.
     */
    match /calls/{callId} {
      function isParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participants;
      }
      function isCreatingParticipant() {
        return request.auth != null && request.auth.uid in request.resource.data.participants;
      }
       function isExistingParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participants && resource != null;
      }

      allow get, list: if isParticipant();
      allow create: if isCreatingParticipant();
      allow update: if isExistingParticipant();
      allow delete: if isExistingParticipant();
    }

    /**
     * @description Secure ICE candidates. Access is granted to participants of the parent call only.
     * @path /calls/{callId}/candidates/{candidateId}
     * @allow (get, list) User 'user_abc' can read an ICE candidate if they are a participant in the parent call.
     * @allow (create) User 'user_abc' can create an ICE candidate if they are a participant in the parent call.
     * @allow (update, delete) Not allowed to update/delete candidates.
     * @deny (get, list, create) User 'user_xyz' cannot access an ICE candidate if they are not a participant in the parent call.
     * @principle Enforces shared access based on the participants list of the parent call.
     */
    match /calls/{callId}/candidates/{candidateId} {
       function isParentParticipant() {
        return request.auth != null && get(/databases/$(database)/documents/calls/$(callId)).data.participants.hasAny([request.auth.uid]);
      }

      allow get, list: if isParentParticipant();
      allow create: if isParentParticipant();
      allow update, delete: if false;
    }
  }
}