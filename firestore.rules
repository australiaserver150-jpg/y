/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data and shared access for chats. It prioritizes security and performance by denormalizing authorization data directly onto documents.
 * @dataStructure
 *   - /users/{userId}: Stores private user data. Only the authenticated user can access their own data.
 *   - /user_profiles/{profileId}: Stores public user profile data.
 *   - /users/{userId}/projects/{projectId}: Stores projects owned by a specific user.
 *   - /chats/{chatId}: Stores chat metadata. Access is granted to participants listed in the 'participants' array.
 *   - /chats/{chatId}/messages/{messageId}: Stores messages within a chat. Access controlled by chat participants.
 *   - /statuses/{statusId}: Stores status posts.
 *   - /channels/{channelId}: Stores channel metadata.
 *   - /channels/{channelId}/messages/{messageId}: Stores messages within a channel.
 *   - /users/{userId}/callLogs/{callLogId}: Stores call logs for a user. Only the authenticated user can access their own call logs.
 * @keySecurityDecisions
 *   - User listing is disallowed to protect privacy.
 *   - Public read access is not generally granted, except where explicitly noted (e.g., potentially on Statuses).
 *   - Data schema validation is relaxed to allow for rapid prototyping and iteration.
 *   - The rules enforce strong ownership and shared access models to prevent unauthorized data access.
 * @denormalizationForAuthorization
 *   - Chat documents include a 'participants' array containing user IDs to avoid complex queries for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user-specific data. Only the authenticated user can read or write their own data.
     * @path /users/{userId}/{document=**}
     * @allow (read, write) - Authenticated user with UID matching the userId in the path.
     * @deny (read, write) - Authenticated user with UID not matching the userId in the path.
     * @principle Enforces document ownership for all data under the /users/{userId} path.
     */
    match /users/{userId}/{document=**} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to user profile data.
     * @path /user_profiles/{profileId}
     * @allow (read) - Any authenticated user can read any profile.
     * @allow (create) - An authenticated user can create their own profile.
     * @allow (update, delete) - Only the owner of the profile (matching profileId) can update or delete it.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (update, delete) - A different authenticated user cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /user_profiles/{profileId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == profileId;
      allow update: if isSignedIn() && resource != null && request.auth.uid == profileId;
      allow delete: if isSignedIn() && resource != null && request.auth.uid == profileId;
    }

    /**
     * @description Controls access to project data. Each project is owned by a user.
     * @path /users/{userId}/projects/{projectId}
     * @allow (read, write) - Only the owner (matching userId) can read or write.
     * @deny (read, write) - A different user cannot read or write.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat data. Only participants in the chat can read or write.
     * @path /chats/{chatId}
     * @allow (read, write) - Only participants (user IDs in the 'participants' array) can read or write.
     * @deny (read, write) - Users not in the 'participants' array cannot access.
     * @principle Enforces shared access based on the 'participants' array.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && isParticipant(resource.data.participants);
      allow list: if isSignedIn() && isParticipant(resource.data.participants);
      allow create: if isSignedIn() && request.resource.data.participants.hasAll([request.auth.uid]);
      allow update: if isSignedIn() && resource != null && isParticipant(resource.data.participants);
      allow delete: if isSignedIn() && resource != null && isParticipant(resource.data.participants);
    }

    /**
     * @description Controls access to messages within a chat. Only participants in the parent chat can read or write messages.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, write) - Only participants of the chat can read or write messages.
     * @deny (read, write) - Non-participants cannot access messages.
     * @principle Enforces shared access based on the parent chat's 'participants' array.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && isChatParticipant(chatId);
      allow list: if isSignedIn() && isChatParticipant(chatId);
      allow create: if isSignedIn() && isChatParticipant(chatId);
      allow update: if isSignedIn() && resource != null && isChatParticipant(chatId);
      allow delete: if isSignedIn() && resource != null && isChatParticipant(chatId);
    }

    /**
     * @description Controls access to status posts.
     * @path /statuses/{statusId}
     * @allow (read) - Any authenticated user can read any status.
     * @allow (create) - Any authenticated user can create their own status post.
     * @allow (update, delete) - Only the owner of the status can update or delete it.
     * @deny (create) - An unauthenticated user cannot create a status.
     * @deny (update, delete) - A different authenticated user cannot update or delete another user's status.
     * @principle Enforces document ownership for writes.
     */
    match /statuses/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && resource != null && request.auth.uid == resource.data.userId;
    }

     /**
      * @description Controls access to channel data.
      * @path /channels/{channelId}
      * @allow (read) - Any authenticated user can read any channel.
      * @allow (create, update, delete) - Only the channel owner (matching ownerId) can create, update, or delete.
      * @principle Enforces document ownership for writes.
      */
     match /channels/{channelId} {
       allow get, list: if true;
       allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
       allow update: if isSignedIn() && resource != null && request.auth.uid == resource.data.ownerId;
       allow delete: if isSignedIn() && resource != null && request.auth.uid == resource.data.ownerId;
     }

    /**
     * @description Controls access to messages within a channel.
     * @path /channels/{channelId}/messages/{messageId}
     * @allow (read) - Any authenticated user can read any message within a channel.
     * @allow (create) - Any authenticated user can create a message within a channel.
     * @allow (update, delete) - Only the message sender (matching userId) can update or delete their own message.
     * @principle Grants read access to all authenticated users, but limits write access to the message sender.
     */
    match /channels/{channelId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null && request.auth.uid == resource.data.senderId;
      allow delete: if isSignedIn() && resource != null && request.auth.uid == resource.data.senderId;
    }

    /**
     * @description Controls access to call log data. Each call log is owned by a user.
     * @path /users/{userId}/callLogs/{callLogId}
     * @allow (read, write) - Only the owner (matching userId) can read or write.
     * @deny (read, write) - A different user cannot read or write.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/callLogs/{callLogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isParticipant(participants) {
      return isSignedIn() && participants is list && request.auth.uid in participants;
    }

    function isChatParticipant(chatId) {
      return get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
    }
  }
}