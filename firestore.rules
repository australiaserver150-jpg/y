rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for user documents. Only the authenticated user can read, update, or delete their own user document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a document where userId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their own document at /users/user_abc.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read user profiles, but only the profile owner can update or delete them.
     * @path /user_profiles/{profileId}
     * @allow (get, list) - Any user can read any profile.
     * @allow (create) - User with UID 'user_abc' can create a document where profileId == 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update or delete their profile at /user_profiles/user_abc.
     * @deny (create, update, delete) - User with UID 'user_xyz' cannot access /user_profiles/user_abc.
     * @principle Public read, owner-only writes, enforces document ownership for writes.
     */
    match /user_profiles/{profileId} {
      function isOwner(profileId) {
        return request.auth != null && request.auth.uid == profileId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == profileId;
      allow update: if isOwner(profileId);
      allow delete: if isOwner(profileId);
    }

    /**
     * @description Enforces ownership for project documents. Only the owner (specified in the path) can manage their projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create, get, list, update, delete) - User with UID 'user_abc' can manage projects under /users/user_abc/projects/{projectId}.
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot access projects under /users/user_abc/projects/{projectId}.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/projects/{projectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces ownership for messages within a project. Only the owner of the project can manage messages within it.
     * @path /users/{userId}/projects/{projectId}/messages/{messageId}
     * @allow (create, get, list, update, delete) - User 'user_abc' can manage messages in their project /users/user_abc/projects/project_123/messages/{messageId}.
     * @deny (create, get, list, update, delete) - User 'user_xyz' cannot access messages in /users/user_abc/projects/project_123/messages/{messageId}.
     * @principle Uses path-based ownership to control access to nested resources.
     */
    match /users/{userId}/projects/{projectId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}