rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read) Authenticated user can read any profile for search.
     * @allow (create, update, delete) Authenticated user can only write their own profile data.
     * @deny (create, update, delete) Authenticated user cannot write another user's profile data.
     * @principle Enforces document ownership for writes; allows public reads for authenticated users.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to chat documents and subcollections.
     * @path /chats/{chatId}
     * @allow (read, write) Only chat participants can read and write chat documents.
     * @deny (read, write) Users who are not participants cannot access the chat.
     * @principle Enforces shared access based on the `participants` array.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn() && isParticipant(resource.data.participants);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.participants is list && isParticipant(request.resource.data.participants);
      allow update: if isSignedIn() && isParticipant(resource.data.participants);
      allow delete: if isSignedIn() && isParticipant(resource.data.participants);

      /**
       * @description Controls access to messages within a chat.
       * @path /chats/{chatId}/messages/{messageId}
       * @allow (read, write) Only chat participants can read and write messages.
       * @deny (read, write) Users who are not participants cannot access messages.
       * @principle Enforces shared access based on the parent chat's `participants` array.
       */
      match /chats/{chatId}/messages/{messageId} {
        allow get: if isSignedIn() && isParticipantInParentChat(chatId);
        allow list: if false;
        allow create: if isSignedIn() && isParticipantInParentChat(chatId);
        allow update: if isSignedIn() && isParticipantInParentChat(chatId);
        allow delete: if isSignedIn() && isParticipantInParentChat(chatId);
      }
    }

    /**
     * @description Controls access to call signaling documents and subcollections.
     * @path /calls/{callId}
     * @allow (read, write) Only call participants can read and write call documents.
     * @deny (read, write) Users who are not participants cannot access the call.
     */
    match /calls/{callId} {
        allow get: if isSignedIn() && isCallParticipant(resource.data.participants);
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.participants is list && isCallParticipant(request.resource.data.participants);
        allow update: if isSignedIn() && isCallParticipant(resource.data.participants);
        allow delete: if isSignedIn() && isCallParticipant(resource.data.participants);

      /**
       * @description Controls access to call signaling candidates within a call.
       * @path /calls/{callId}/candidates/{candId}
       * @allow (read, write) Only call participants can read and write candidates.
       * @deny (read, write) Users who are not participants cannot access candidates.
       */
      match /calls/{callId}/candidates/{candId} {
        allow get: if isSignedIn() && isCallParticipantInParentCall(callId);
        allow list: if false;
        allow create: if isSignedIn() && isCallParticipantInParentCall(callId);
        allow update: if isSignedIn() && isCallParticipantInParentCall(callId);
        allow delete: if isSignedIn() && isCallParticipantInParentCall(callId);
      }
    }
    /**
     * @description Controls access to friend request documents.
     * @path /friendRequests/{requestId}
     * @allow (create) Any authenticated user can create a friend request.
     */
    match /friendRequests/{requestId} {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the document based on the userId.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Checks if the user is the owner of an existing document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

    // Check if the incoming new user document is valid.
  function isValidNewUser(userId) {
    return request.resource.data.id == userId;
  }

  // Checks if the userId field is immutable on update.
  function isImmutableUserId(userId) {
    return request.resource.data.id == resource.data.id;
  }

  // Checks if the user is a participant in the chat.
  function isParticipant(participants) {
    return participants is list && request.auth.uid in participants;
  }

  // Checks if the user is a participant in the parent chat (using a get() call).
  function isParticipantInParentChat(chatId) {
    return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
  }

  // Checks if the user is a participant in the call.
   function isCallParticipant(participants) {
    return participants is list && request.auth.uid in participants;
  }

  // Checks if the user is a participant in the parent call (using a get() call).
  function isCallParticipantInParentCall(callId) {
    return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participants;
  }
}