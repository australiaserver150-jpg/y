/**
 * @file Firestore Security Rules for ConnectNow
 * @description This ruleset enforces a role-based access control model for a real-time chat application, with user profiles, chat rooms, messages, smart replies, and analytics events.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user themselves (owner-only).
 * - /chatRooms/{chatRoomId}: Stores chat room metadata, including a 'participantIds' array for authorization.
 * - /chatRooms/{chatRoomId}/messages/{messageId}: Stores chat messages within chat rooms. Access is controlled by the parent chat room's participant list.
 * - /chatRooms/{chatRoomId}/messages/{messageId}/smartReplies/{smartReplyId}: Stores smart reply suggestions. Access is controlled by the parent message and chat room.
 * - /analyticsEvents/{analyticsEventId}: Stores analytics events.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Chat room access is granted to participants listed in the 'participantIds' array.
 * - Analytics events are writeable, but not readable, to simulate backend-only data collection.
 * - Data validation is minimal in this prototype, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The 'participantIds' array is denormalized into the chatRoom document. This allows for efficient security rules that avoid costly `get()` operations when accessing messages and smart replies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @allow (get, update, delete, list) User with ID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete, list) User with ID 'user456' cannot access 'user123' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; //Prevent listing of all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat room documents.
     * @path /chatRooms/{chatRoomId}
     * @allow (get, list) Any user can read or list chat rooms.
     * @allow (create) A user can create a chatroom if they are in the participant list.
     * @allow (update, delete) Only participants of the chat room can modify or delete it.
     * @deny (create) A user cannot create a chat room without being in the participant list.
     * @principle Enforces shared access based on the 'participantIds' array.
     */
    match /chatRooms/{chatRoomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
        return isSignedIn() && request.auth.uid in resource.data.participantIds;
      }
      
      function isCreatingParticipant(){
          return isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingParticipant();
      allow update: if isParticipant();
      allow delete: if isParticipant();
    }

    /**
     * @description Controls access to chat messages within a chat room.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}
     * @allow (get, list) Any participant of the chat room can read or list messages.
     * @allow (create) A participant of the chat room can create a message.
     * @allow (update, delete) Only participants of the chat room can modify or delete messages.
     * @deny (create) A user cannot create a message in a chat room if they are not a participant.
     * @principle Enforces shared access based on the parent chat room's 'participantIds' array.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

      function isChatRoomParticipant(chatRoomId) {
        return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId))
            && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds;
      }

      allow get, list: if isChatRoomParticipant(chatRoomId);
      allow create: if isSignedIn() && isChatRoomParticipant(chatRoomId);
      allow update: if isChatRoomParticipant(chatRoomId);
      allow delete: if isChatRoomParticipant(chatRoomId);
    }

    /**
     * @description Controls access to smart replies for a chat message.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}/smartReplies/{smartReplyId}
     * @allow (get, list) Any participant of the parent chat room can read or list smart replies.
     * @allow (create) Any participant of the parent chat room can create a smart reply.
     * @allow (update, delete) Any participant of the parent chat room can modify or delete smart replies.
     * @deny (create) A user cannot create a smart reply if they are not a participant of the parent chat room.
     * @principle Enforces shared access based on the grandparent chat room's 'participantIds' array.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId}/smartReplies/{smartReplyId} {
        function isSignedIn() {
            return request.auth != null;
        }
      function isChatRoomParticipant(chatRoomId) {
        return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId))
            && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds;
      }

      allow get, list: if isChatRoomParticipant(chatRoomId);
      allow create: if isSignedIn() && isChatRoomParticipant(chatRoomId);
      allow update: if isChatRoomParticipant(chatRoomId);
      allow delete: if isChatRoomParticipant(chatRoomId);
    }

    /**
     * @description Controls access to analytics event documents.
     * @path /analyticsEvents/{analyticsEventId}
     * @allow (create) Allows any authenticated user to create analytics events.
     * @deny (get, list, update, delete) Prevents any client-side access to analytics data.
     * @principle Restricts access to analytics data to prevent unauthorized reads or modifications.
     */
    match /analyticsEvents/{analyticsEventId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}