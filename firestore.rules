/**
 * @fileoverview Firestore Security Rules for ConnectNow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data
 * (profiles, projects, call logs) and a shared access model for collaborative
 * data (chats, channels). It prioritizes security by default, explicitly
 * denying access where the relationship between users and data is ambiguous.
 *
 * Data Structure:
 * - /users/{userId}: User account information; owned by the user.
 * - /user_profiles/{profileId}: User profile information; 1:1 with User.
 * - /users/{userId}/projects/{projectId}: Projects owned by a user.
 * - /chats/{chatId}: Chat metadata; accessible to chat participants.
 * - /chats/{chatId}/messages/{messageId}: Messages within a chat.
 * - /statuses/{statusId}: Public status posts.
 * - /channels/{channelId}: Broadcast channel metadata.
 * - /channels/{channelId}/messages/{messageId}: Messages within a channel.
 * - /users/{userId}/callLogs/{callLogId}: Call logs for a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Chats are accessible to logged-in users (participants will be controlled within the application logic).
 * - Statuses are publicly readable, but only the owner can create, update, or delete them.
 * - Channels are publicly accessible, but write access will be controlled through the application.
 * - User listing is disallowed.
 * - Read operations for non-existent documents will reach the backend.
 * - Write operations will always verify document existence before modification.
 *
 * Denormalization for Authorization:
 * - The Project entity includes a `userId` field to enforce ownership.
 * - Statuses include denormalized user information (`userName`, `userAvatar`) for display.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own account data and subcollections.
     * @path /users/{userId}/{document=**}
     * @allow (read, write) User with UID 'user123' can read and write data under /users/user123/profile.
     * @deny (read, write) User with UID 'user456' cannot read or write data under /users/user123/profile.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/{document=**} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows access to user profile information.
     * @path /user_profiles/{profileId}
     * @allow (get, list) Any authenticated user can get and list user profiles.
     * @allow (create, update, delete) Only the user with matching profileId can manage their profile.
     * @deny (create, update, delete) User with UID 'user456' cannot manage profile with ID 'user123'.
     * @principle Enforces document ownership for profile management.
     */
    match /user_profiles/{profileId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == profileId;
      allow update, delete: if isSignedIn() && isOwner(profileId) && resource != null;
    }

    /**
     * @description Allows access to projects owned by a specific user.
     * @path /users/{userId}/projects/{projectId}
     * @allow (read, write) User with UID 'user123' can read and write project 'project456' under /users/user123/projects/project456.
     * @deny (read, write) User with UID 'user456' cannot read or write project 'project456' under /users/user123/projects/project456.
     * @principle Enforces project ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows logged-in users to read and write to chats. Authorization will be enforced in the app by only showing the chats a user has access to.
     * @path /chats/{chatId}
     * @allow (read, write) Any logged-in user can read and write chat data.
     * @deny (read, write) Unauthorized users (not logged in) cannot access chat data.
     * @principle Allows access to authenticated users.
     */
    match /chats/{chatId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows logged-in users to read and write messages within chats.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (read, write) Any logged-in user can read and write message data within chats.
     * @deny (read, write) Unauthorized users (not logged in) cannot access message data within chats.
     * @principle Allows access to authenticated users within chat contexts.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to statuses, but restricts write access to the owner.
     * @path /statuses/{statusId}
     * @allow (get, list) Any user can read status data.
     * @allow (create) Only the user who owns the status can create it, enforcing userId in the document.
     * @allow (update, delete) Only the user who owns the status can update or delete it.
     * @deny (create) User 'user456' cannot create a status claiming to be 'user123'.
     * @deny (update, delete) User 'user456' cannot update or delete status owned by 'user123'.
     * @principle Allows public read access with owner-only writes, validating ownership.
     */
    match /statuses/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.userId);
    }

    /**
     * @description Allows read and write to channels for logged in users. Authorization will be enforced in the app by only showing the channels a user has access to.
     * @path /channels/{channelId}
     * @allow (read, write) Any logged-in user can read and write channel data.
     * @deny (read, write) Unauthorized users (not logged in) cannot access channel data.
     * @principle Allows access to authenticated users.
     */
    match /channels/{channelId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows logged-in users to read and write messages within channels.
     * @path /channels/{channelId}/messages/{messageId}
     * @allow (read, write) Any logged-in user can read and write message data within channels.
     * @deny (read, write) Unauthorized users (not logged in) cannot access message data within channels.
     * @principle Allows access to authenticated users within channel contexts.
     */
    match /channels/{channelId}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows users to manage their own call logs.
     * @path /users/{userId}/callLogs/{callLogId}
     * @allow (read, write) User with UID 'user123' can read and write call logs under /users/user123/callLogs.
     * @deny (read, write) User with UID 'user456' cannot read or write call logs under /users/user123/callLogs.
     * @principle Enforces document ownership for call log management.
     */
     match /users/{userId}/callLogs/{callLogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    //-------------------- Helper functions --------------------

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare with the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare with the authenticated user's ID.
     * @return {bool} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}