/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data,
 *              shared access for collaborative content, and public read access with
 *              owner-only writes for certain collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user account information, accessible only to the user.
 * - /user_profiles/{profileId}: Stores public user profile data, accessible to all.
 * - /users/{userId}/projects/{projectId}: Stores projects owned by a specific user, accessible only to the owner.
 * - /chats/{chatId}: Stores chat metadata, accessible to participants.
 * - /chats/{chatId}/messages/{messageId}: Stores chat messages, accessible to participants of the chat.
 * - /statuses/{statusId}: Stores status posts, publicly readable, but only the owner can modify.
 * - /channels/{channelId}: Stores channel metadata, publicly readable, but only the owner can modify.
 * - /channels/{channelId}/messages/{messageId}: Stores channel messages, accessible to members of the channel.
 * - /users/{userId}/callLogs/{callLogId}: Stores call logs for each user, accessible only to the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted to statuses.
 * - Ownership is enforced through path-based matching and explicit userId fields.
 * - The rules are designed to prevent unauthorized data access and modification.
 *
 * Denormalization for Authorization:
 * - The `Project` entity includes a `userId` to reference the owning user.
 * - `Status` documents include `userName` and `userAvatar` for display.
 * - `Chat` documents include `participants` array.
 *
 * Structural Segregation:
 * - User data and profiles are separated into `/users/{userId}` and `/user_profiles/{profileId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own document.
     * @allow (get) User with ID 'user123' can read their own document.
     * @allow (update) User with ID 'user123' can update their own document.
     * @allow (delete) User with ID 'user123' can delete their own document.
     * @deny (create) User with ID 'user456' cannot create a document with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read document with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to user profile documents.
     * @path /user_profiles/{profileId}
     * @allow (get) Any user can read any profile.
     * @allow (list) Any user can list profiles.
     * @deny (create) No one can create profiles directly.
     * @deny (update) No one can update profiles directly.
     * @deny (delete) No one can delete profiles directly.
     * @principle Public read access with no write access.
     */
    match /user_profiles/{profileId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows access to project documents based on ownership.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User with ID 'user123' can create a project under their ID.
     * @allow (get) User with ID 'user123' can read a project under their ID.
     * @allow (update) User with ID 'user123' can update a project under their ID.
     * @allow (delete) User with ID 'user123' can delete a project under their ID.
     * @deny (create) User with ID 'user456' cannot create a project under user123.
     * @deny (get) User with ID 'user456' cannot read a project under user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to chat documents based on participant list.
     * @path /chats/{chatId}
     * @allow (get) User who is a participant can read the chat.
     * @allow (list) N/A (No `resource` variable available)
     * @allow (create) N/A
     * @allow (update) N/A
     * @allow (delete) N/A
     * @deny (get) User who is not a participant cannot read the chat.
     * @principle Enforces shared access based on the `participants` array.
     */
    match /chats/{chatId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isParticipant() {
            return isSignedIn() && request.auth.uid in resource.data.participants;
        }

        allow get: if isSignedIn() && isParticipant();
        allow list: if isSignedIn(); // Listing of chats is public for prototyping.
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows access to message documents within a chat based on chat participants.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get) User who is a participant of the chat can read the message.
     * @allow (list) User who is a participant of the chat can list messages.
     * @deny (create) User who is not a participant of the chat cannot create a message.
     * @deny (update) User who is not a participant of the chat cannot update a message.
     * @deny (delete) User who is not a participant of the chat cannot delete a message.
     * @principle Enforces shared access based on the `participants` array in the chat document.
     */
    match /chats/{chatId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isChatParticipant() {
            return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        }

        allow get: if isSignedIn() && isChatParticipant();
        allow list: if isSignedIn() && isChatParticipant();
        allow create: if isSignedIn() && isChatParticipant();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to status documents, but only the owner can modify.
     * @path /statuses/{statusId}
     * @allow (get) Any user can read any status.
     * @allow (list) Any user can list statuses.
     * @allow (create) User can create a status if the userId matches their auth.
     * @allow (update) User can update a status if they are the owner.
     * @allow (delete) User can delete a status if they are the owner.
     * @deny (create) User cannot create a status if the userId does not match their auth.
     * @deny (update) User cannot update a status if they are not the owner.
     * @deny (delete) User cannot delete a status if they are not the owner.
     * @principle Public read access with owner-only writes.
     */
    match /statuses/{statusId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows public read access to channel documents, but only the owner can modify.
     * @path /channels/{channelId}
     * @allow (get) Any user can read any channel.
     * @allow (list) Any user can list channels.
     * @allow (create) User can create a channel if they are authenticated.
     * @allow (update) User can update a channel if they are the owner.
     * @allow (delete) User can delete a channel if they are the owner.
     * @deny (create) User cannot create a channel if they are not authenticated.
     * @deny (update) User cannot update a channel if they are not the owner.
     * @deny (delete) User cannot delete a channel if they are not the owner.
     * @principle Public read access with owner-only writes.
     */
    match /channels/{channelId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
          return isSignedIn() && isOwner(ownerId) && resource.data.ownerId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows access to message documents within a channel based on channel membership.
     * @path /channels/{channelId}/messages/{messageId}
     * @allow (get) User who is a member of the channel can read the message.
     * @allow (list) User who is a member of the channel can list messages.
     * @deny (create) User who is not a member of the channel cannot create a message.
     * @deny (update) User who is not a member of the channel cannot update a message.
     * @deny (delete) User who is not a member of the channel cannot delete a message.
     * @principle Enforces shared access based on the `memberIds` array in the channel document.
     */
    match /channels/{channelId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isChannelMember() {
        return isSignedIn() && get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get: if isSignedIn() && isChannelMember();
      allow list: if isSignedIn() && isChannelMember();
      allow create: if isSignedIn() && isChannelMember();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to call log documents based on ownership.
     * @path /users/{userId}/callLogs/{callLogId}
     * @allow (create) User with ID 'user123' can create a call log under their ID.
     * @allow (get) User with ID 'user123' can read a call log under their ID.
     * @allow (update) User with ID 'user123' can update a call log under their ID.
     * @allow (delete) User with ID 'user123' can delete a call log under their ID.
     * @deny (create) User with ID 'user456' cannot create a call log under user123.
     * @deny (get) User with ID 'user456' cannot read a call log under user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/callLogs/{callLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}