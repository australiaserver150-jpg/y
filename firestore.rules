/**
 * @fileOverview Firestore Security Rules for ConnectNow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access data that they explicitly own or that is explicitly shared with them.
 * All read and write operations are guarded by authentication and authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information; owned only by the user.
 * - /user_profiles/{profileId}: Stores user profile information; read and write access is restricted to the user owning the profile.
 * - /users/{userId}/projects/{projectId}: Stores project information; owned by the specified user.
 * - /users/{userId}/projects/{projectId}/messages/{messageId}: Stores messages within a project; access is restricted to the project owner.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication and authorization.
 * - Data validation is limited to authorization-critical fields for prototyping.
 *
 * Denormalization for Authorization:
 * - The 'Message' entity includes 'projectId' to allow rules to check that the
 *   sender is the owner of the parent project, without needing to perform additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user accounts; only the authenticated user can manage their own account.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own account with matching userId.
     * @allow (get, update, delete) Authenticated user accesses their own account.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @deny (get, list, update, delete) If the authenticated user is not accessing their own account.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user profiles; only the authenticated user can manage their own profile.
     * @path /user_profiles/{profileId}
     * @allow (create) Authenticated user creates their own profile with matching profileId.
     * @allow (get, update, delete) Authenticated user accesses their own profile.
     * @deny (create) If the authenticated user's ID does not match the requested profileId.
     * @deny (get, list, update, delete) If the authenticated user is not accessing their own profile.
     * @principle Enforces document ownership for all operations.
     */
    match /user_profiles/{profileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwnerProfile(profileId) {
        return request.auth.uid == profileId;
      }

        function isExistingOwnerProfile(profileId) {
        return isOwnerProfile(profileId) && resource != null;
      }

      allow get: if isOwnerProfile(profileId);
      allow list: if false;
      allow create: if isSignedIn() && isOwnerProfile(profileId) && request.resource.data.id == profileId;
      allow update: if isExistingOwnerProfile(profileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwnerProfile(profileId);
    }

    /**
     * @description Secure projects under user accounts; only the project owner can manage their projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) Authenticated user creates a project under their account.
     * @allow (get, list, update, delete) Authenticated user accesses a project under their account.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @deny (get, list, update, delete) If the authenticated user is not accessing a project under their account.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure messages within projects; only the project owner can manage messages.
     * @path /users/{userId}/projects/{projectId}/messages/{messageId}
     * @allow (create) Authenticated user creates a message within a project they own, message.projectId == projectId.
     * @allow (get, list, update, delete) Authenticated user accesses a message within a project they own.
     * @deny (create) If the authenticated user's ID does not match the project owner's ID, or message.projectId != projectId.
     * @deny (get, list, update, delete) If the authenticated user is not accessing a message within a project they own.
     * @principle Enforces document ownership for all operations, validates message.projectId on create.
     */
    match /users/{userId}/projects/{projectId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.resource.data.projectId == resource.data.projectId;
      allow delete: if isExistingOwner(userId);
    }
  }
}