/**
 * @fileoverview Firestore Security Rules for the ConnectNow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * shared access for collaborative content like chats, and public read access with
 * owner-only writes for statuses and channels. Data consistency between paths and
 * document fields is strictly enforced.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user account information.
 * - /user_profiles/{profileId}: Stores public user profile information.
 * - /users/{userId}/projects/{projectId}: Stores projects owned by a specific user.
 * - /chats/{chatId}: Stores chat metadata and participant lists.
 * - /chats/{chatId}/messages/{messageId}: Stores individual chat messages.
 * - /statuses/{statusId}: Stores status posts, publicly readable but owner-writable.
 * - /channels/{channelId}: Stores channel metadata, publicly readable but owner-writable.
 * - /channels/{channelId}/messages/{messageId}: Stores channel messages.
 * - /users/{userId}/callLogs/{callLogId}: Stores call logs for a specific user.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Read-only collections are handled with `allow get, list: if true;`.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The `Project` entity includes a `userId` to reference the owning user, reinforcing ownership.
 * - Chat documents contain a `participants` array and `participantInfo` array of User IDs for easy access control.
 * - Status documents contain denormalized user information (`userName`, `userAvatar`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account information. Only the authenticated user can read or write their own data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own document with matching userId.
     *   request.auth.uid == 'user123' && request.resource.data.id == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their own document.
     *   request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a document with userId 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.id == 'user123'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the document of user 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user profile information. Only authenticated users can read profile data.
     * @path /user_profiles/{profileId}
     * @allow (get, list) - Any authenticated user can read any user profile.
     *   request.auth.uid != null
     * @allow (create) - User with ID 'profile123' can create their own profile document with matching profileId.
     *   request.auth.uid == 'user123' && request.resource.data.id == 'profile123'
     * @allow (update, delete) - User with ID 'user123' can update or delete their profile document.
     *   request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile with profileId 'profile123'.
     *   request.auth.uid == 'user456' && request.resource.data.id == 'profile123'
     * @deny (update, delete) - User with ID 'user456' cannot update or delete the profile of user 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces read-only access for all authenticated users and owner-only writes.
     */
    match /user_profiles/{profileId} {
      function isOwnerProfile(profileId) {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.profileId == profileId;
      }

      function isExistingOwnerProfile(profileId) {
        return isOwnerProfile(profileId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isOwnerProfile(profileId) && request.resource.data.id == profileId;
      allow update: if isExistingOwnerProfile(profileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwnerProfile(profileId);
    }

    /**
     * @description Controls access to project documents. Only the owning user can create, read, update, or delete their projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User with ID 'user123' can create a project under their userId with matching userId in the project data.
     *   request.auth.uid == 'user123' && request.resource.data.userId == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their project.
     *   request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a project under userId 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.userId == 'user123'
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the project of user 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces strict user-ownership for all project data.
     */
    match /users/{userId}/projects/{projectId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat metadata. All chat participants can read chat details, but only participants can modify it.
     * @path /chats/{chatId}
     * @allow (get, list) - Any chat participant can read the chat details.
     *   request.auth.uid in resource.data.participants
     * @allow (create) - Any authenticated user can create a chat.
     *   request.auth.uid != null
     * @allow (update, delete) - Only chat participants can update or delete the chat.
     *   request.auth.uid in resource.data.participants
     * @deny (get, list) - A non-authenticated user cannot read chat details.
     *   request.auth.uid == null
     * @principle Enforces shared access between chat participants.
     */
    match /chats/{chatId} {
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }

      function isExistingParticipant() {
        return isParticipant() && resource != null;
      }

      allow get, list: if isSignedIn() && isParticipant();
      allow create: if isSignedIn();
      allow update: if isExistingParticipant();
      allow delete: if isExistingParticipant();
    }

    /**
     * @description Controls access to individual chat messages within a chat. Only chat participants can read messages, and only the sender can create a message.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) - Any chat participant can read messages in the chat.
     *   request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
     * @allow (create) - Only a chat participant can create a message, and their UID must match the senderId in the message data.
     *   request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants && request.auth.uid == request.resource.data.senderId
     * @deny (get, list) - A non-participant cannot read messages in the chat.
     *   !(request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants)
     * @deny (update, delete) - Messages cannot be updated or deleted.
     *   false
     * @principle Enforces shared read access and sender-only create access for messages.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isChatParticipant(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
      allow get, list: if isSignedIn() && isChatParticipant(chatId);
      allow create: if isSignedIn() && isChatParticipant(chatId) && request.auth.uid == request.resource.data.senderId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to status posts. Statuses are publicly readable, but only the owner can create, update, or delete them.
     * @path /statuses/{statusId}
     * @allow (get, list) - Any user can read any status.
     *   true
     * @allow (create) - Only the authenticated user can create a status with their userId in the status data.
     *   request.auth.uid == request.resource.data.userId
     * @allow (update, delete) - Only the owner can update or delete their status.
     *   request.auth.uid == resource.data.userId
     * @deny (create) - User with ID 'user456' cannot create a status with userId 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.userId == 'user123'
     * @deny (update, delete) - User with ID 'user456' cannot update or delete the status of user 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces public read access with owner-only writes.
     */
    match /statuses/{statusId} {
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      function isExistingOwner() {
        return isOwner() && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to channels. Channels are publicly readable, but only the owner can create, update, or delete them.
     * @path /channels/{channelId}
     * @allow (get, list) - Any user can read any channel.
     *   true
     * @allow (create) - Only the authenticated user can create a channel with their userId in the channel data.
     *   request.auth.uid == request.resource.data.ownerId
     * @allow (update, delete) - Only the owner can update or delete their channel.
     *   request.auth.uid == resource.data.ownerId
     * @deny (create) - User with ID 'user456' cannot create a channel with ownerId 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.ownerId == 'user123'
     * @deny (update, delete) - User with ID 'user456' cannot update or delete the channel of user 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces public read access with owner-only writes.
     */
    match /channels/{channelId} {
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }
      function isExistingOwner() {
        return isOwner() && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to messages within a channel. Only members of the channel can read messages, and only the sender can create a message.
     * @path /channels/{channelId}/messages/{messageId}
     * @allow (get, list) - Any channel member can read messages in the channel.
     *   request.auth.uid in get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds
     * @allow (create) - Only a channel member can create a message.
     *   request.auth.uid in get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds
     * @deny (get, list) - A non-member cannot read messages in the channel.
     *   !(request.auth.uid in get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds)
     * @deny (update, delete) - Messages cannot be updated or deleted.
     *   false
     * @principle Enforces shared read access and sender-only create access for messages.
     */
    match /channels/{channelId}/messages/{messageId} {
      function isChannelMember(channelId) {
        return request.auth.uid in get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds;
      }
      allow get, list: if isSignedIn() && isChannelMember(channelId);
      allow create: if isSignedIn() && isChannelMember(channelId) && request.auth.uid == request.resource.data.senderId;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to call logs for a specific user. Only the owning user can create, read, update, or delete their call logs.
      * @path /users/{userId}/callLogs/{callLogId}
      * @allow (create) - User with ID 'user123' can create a call log under their userId.
      *   request.auth.uid == 'user123'
      * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their call log.
      *   request.auth.uid == 'user123'
      * @deny (create) - User with ID 'user456' cannot create a call log under userId 'user123'.
      *   request.auth.uid == 'user456'
      * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the call log of user 'user123'.
      *   request.auth.uid == 'user456'
      * @principle Enforces strict user-ownership for all call log data.
      */
    match /users/{userId}/callLogs/{callLogId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}