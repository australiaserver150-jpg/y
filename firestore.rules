/**
 * @file Firebase Security Rules for ConnectNow Application
 *
 * @description This ruleset enforces a user-ownership model for private data,
 * allowing users to read and write their own data only. Public data, such as
 * statuses, is readable by all but writable only by the owner. Chat messages
 * are accessible only to participants of the chat.
 *
 * @dataStructure
 * - /users/{userId}: User account information, owned by the user.
 * - /user_profiles/{profileId}: User profile information, owned by the user.
 * - /users/{userId}/projects/{projectId}: Projects owned by the user.
 * - /chats/{chatId}: Chat metadata; access controlled by participants list.
 * - /chats/{chatId}/messages/{messageId}: Messages within a chat; access controlled by chat participants.
 * - /statuses/{statusId}: Public status posts, writable only by the owner.
 * - /channels/{channelId}: Broadcast channels, writable only by the owner.
 * - /channels/{channelId}/messages/{messageId}: Messages within a channel; access controlled by channel members.
 * - /users/{userId}/callLogs/{callLogId}: Call history for a user, owned by the user.
 *
 * @keySecurityDecisions
 * - Users can only create, read, update, and delete their own user documents and related data.
 * - Statuses are publicly readable but only the owner can create, update, or delete them.
 * - Chat access is based on the participants array within the chat document.
 * - Listing of user documents is disallowed for security reasons.
 *
 * @denormalizationForAuthorization
 * - The Project documents have a userId property for ownership.
 * - The Status documents have userId, userName, and userAvatar fields to avoid additional lookups.
 * - The Chat documents have a participants array to simplify access control.
 * - The CallLog documents have a participantIds array to simplify access control.
 *
 * @structuralSegregation
 * - User data and profiles are in separate collections to allow for different access controls.
 * - Private user data is stored under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is in the list of participants.
     */
    function isParticipant(participants) {
      return isSignedIn() && participants.hasAny([request.auth.uid]);
    }

    /**
     * @description Rule for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own user document.
     * @allow (get, update, delete) - Authenticated user accesses their own user document.
     * @deny (create) - Authenticated user tries to create a user document with a different userId.
     * @deny (get, update, delete) - Authenticated user tries to access another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /user_profiles/{profileId} collection.
     * @path /user_profiles/{profileId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user tries to create a profile with a different profileId.
     * @deny (get, update, delete) - Authenticated user tries to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /user_profiles/{profileId} {
      allow get: if true;
      allow list: if true; // TODO: Review if listing user profiles should be allowed
      allow create: if isSignedIn() && request.resource.data.id == profileId;
      allow update: if isSignedIn() && request.resource.data.id == profileId && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && request.resource.data.id == profileId && request.resource.data.id == resource.data.id;
    }

    /**
     * @description Rule for /users/{userId}/projects/{projectId} collection.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - Authenticated user creates a project under their own user ID.
     * @allow (get, update, delete) - Authenticated user accesses their own project.
     * @deny (create) - Authenticated user tries to create a project under a different user ID.
     * @deny (get, update, delete) - Authenticated user tries to access another user's project.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /chats/{chatId} collection.
     * @path /chats/{chatId}
     * @allow (get, list) - Any user can read chat metadata if they are a participant.
     * @allow (create, update, delete) - Only participants of the chat can modify it.
     * @deny (get, list) - A user tries to access a chat they are not a participant in.
     * @principle Enforces shared access based on the participants array.
     */
    match /chats/{chatId} {
      allow get: if isParticipant(resource.data.participants);
      allow list: if isSignedIn(); // Anyone signed in can see the list of chats
      allow create: if isSignedIn() && request.resource.data.participants.hasAny([request.auth.uid]);
      allow update: if resource != null && isParticipant(resource.data.participants);
      allow delete: if resource != null && isParticipant(resource.data.participants);
    }

    /**
     * @description Rule for /chats/{chatId}/messages/{messageId} collection.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) - Any user can read messages in a chat if they are a participant.
     * @allow (create) - Only participants of the chat can send messages.
     * @deny (get, list) - A user tries to access messages in a chat they are not a participant in.
     * @principle Enforces shared access based on the participants array in the parent chat document.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow list: if isSignedIn(); // Anyone signed in can see the list of messages
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for /statuses/{statusId} collection.
     * @path /statuses/{statusId}
     * @allow (get, list) - Anyone can read statuses.
     * @allow (create, update, delete) - Only the owner can create, update, or delete their own status.
     * @deny (create) - Authenticated user tries to create a status for another user.
     * @deny (update, delete) - Authenticated user tries to modify or delete another user's status.
     * @principle Enforces public read access with owner-only writes.
     */
    match /statuses/{statusId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if resource != null && isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if resource != null && isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rule for /channels/{channelId} collection.
     * @path /channels/{channelId}
     * @allow (get, list) - Any user can read channel metadata.
     * @allow (create, update, delete) - Only the owner can create, update, or delete a channel.
     * @deny (create) - Authenticated user tries to create a channel for another user.
     * @deny (update, delete) - Authenticated user tries to modify or delete another user's channel.
     * @principle Enforces public read access with owner-only writes.
     */
    match /channels/{channelId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if resource != null && isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if resource != null && isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rule for /channels/{channelId}/messages/{messageId} collection.
     * @path /channels/{channelId}/messages/{messageId}
     * @allow (get, list) - Any user can read messages in a channel.
     * @allow (create) - Only members of the channel can send messages.
     * @deny (create) - A user tries to send a message to a channel they are not a member of.
     */
    match /channels/{channelId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds.hasAny([request.auth.uid]);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for /users/{userId}/callLogs/{callLogId} collection.
     * @path /users/{userId}/callLogs/{callLogId}
     * @allow (create) - Authenticated user creates a call log under their own user ID.
     * @allow (get, update, delete) - Authenticated user accesses their own call log.
     * @deny (create) - Authenticated user tries to create a call log under a different user ID.
     * @deny (get, update, delete) - Authenticated user tries to access another user's call log.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/callLogs/{callLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isExistingOwner(userId) && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow delete: if isExistingOwner(userId);
    }
  }
}