/**
 * @description This ruleset enforces a strict user-ownership model for data access.  All data is nested under /users/{userId}, ensuring only the authenticated owner can manage their data.
 * @data_structure
 *   - /users/{userId}: Stores user account information.
 *   - /user_profiles/{profileId}: Stores user profile information, linked to a user via profileId.
 *   - /users/{userId}/projects/{projectId}: Stores project data owned by a specific user.
 *   - /users/{userId}/projects/{projectId}/messages/{messageId}: Stores messages within a project, with denormalized projectId.
 * @key_security_decisions
 *   - Strict owner-only access: Users can only access data under their own user ID.
 *   - No listing of all users or user profiles: Listing operations are restricted to prevent information disclosure.
 *   - Denormalization for authorization:  Project and message documents include explicit userId and projectId fields to avoid costly `get()` calls in security rules.
 *   - Immutability of ownership fields: Once a user or project ID is set, it cannot be changed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account documents. Only the authenticated user can read or write their own document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create /users/user_abc with matching id.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /users/user_abc.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user profile documents. Only authenticated users can read a profile and the profileId must match the user's UID.
     * @path /user_profiles/{profileId}
     * @allow (create) - User with UID 'user_abc' can create /user_profiles/user_abc with matching id.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /user_profiles/user_abc.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /user_profiles/user_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /user_profiles/{profileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(profileId) {
        return request.auth.uid == profileId;
      }

      function isExistingOwner(profileId) {
        return isSignedIn() && isOwner(profileId) && resource != null;
      }


      allow get: if isOwner(profileId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(profileId) && request.resource.data.id == profileId;
      allow update: if isExistingOwner(profileId);
      allow delete: if isExistingOwner(profileId);
    }

     /**
      * @description Controls access to project documents. Only the owner of the project (identified by userId in the path) can create, read, update, or delete it.
      * @path /users/{userId}/projects/{projectId}
      * @allow (create) - User with UID 'user_abc' can create /users/user_abc/projects/project_1 with project data including userId: 'user_abc'.
      * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /users/user_abc/projects/project_1.
      * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc/projects/project_1.
      * @principle Enforces document ownership and ensures relational integrity between the user and project.
      */
    match /users/{userId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if false; // Listing projects should not be allowed, even for the owner.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to message documents within a project. Only the owner of the parent project can manage messages.
     * @path /users/{userId}/projects/{projectId}/messages/{messageId}
     * @allow (create) - User with UID 'user_abc' can create /users/user_abc/projects/project_1/messages/message_1 if they own project_1.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete /users/user_abc/projects/project_1/messages/message_1 if they own project_1.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc/projects/project_1/messages/message_1.
     * @principle Enforces hierarchical ownership and validates the projectId in the message data.
     */
    match /users/{userId}/projects/{projectId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing messages should not be allowed, even for the owner.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}