/**
 * @file Firebase Security Rules for ConnectNow Application
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access data they own or that is explicitly shared with them. It focuses on simplicity and performance by denormalizing authorization data within documents, avoiding costly `get()` calls.
 *
 * @dataStructure
 *  - /users/{userId}: Stores user account information, accessible only to the user themselves.
 *  - /user_profiles/{profileId}: Stores user profile information, accessible only to the user themselves.
 *  - /users/{userId}/projects/{projectId}: Stores project information, accessible only to the project owner.
 *  - /users/{userId}/projects/{projectId}/messages/{messageId}: Stores messages within a project, accessible only to project members.
 *
 * @keySecurityDecisions
 *  - User listing is disabled for privacy.
 *  - All write operations require authentication and authorization.
 *  - Data consistency between the path and document data is enforced on create and update operations.
 *
 * @denormalizationForAuthorization
 *  - The `Project` and `Message` documents denormalize the `userId` to enable faster security checks.
 *
 * @structuralSegregation
 *  - User data and profile data are stored in separate collections to accommodate different access patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user account information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own record.
     * @allow (get, list, update, delete) User can only access their own record.
     * @deny (create) User cannot create a record with a mismatched UID.
     * @deny (update, delete) User cannot modify or delete another user's record.
     * @principle Enforces document ownership and prevents unauthorized access to user accounts.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user profile information.
     * @path /user_profiles/{profileId}
     * @allow (create) User with matching profileId can create their own profile.
     * @allow (get, list, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile with a mismatched profileId.
     * @deny (update, delete) User cannot modify or delete another user's profile.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /user_profiles/{profileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwnerProfile(profileId) {
        return request.auth.uid == profileId; // Assuming profileId is the same as userId
      }

      function isExistingOwnerProfile(profileId) {
        return isOwnerProfile(profileId) && resource != null;
      }

      allow get: if isOwnerProfile(profileId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isSignedIn() && isOwnerProfile(profileId) && request.resource.data.id == profileId;
      allow update: if isExistingOwnerProfile(profileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwnerProfile(profileId);
    }

    /**
     * @description Controls access to project information.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User with matching userId can create a project.
     * @allow (get, list, update, delete) User can only access their own projects.
     * @deny (create) User cannot create a project with a mismatched userId.
     * @deny (update, delete) User cannot modify or delete another user's project.
     * @principle Enforces document ownership and prevents unauthorized access to projects.
     */
    match /users/{userId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to messages within a project.
     * @path /users/{userId}/projects/{projectId}/messages/{messageId}
     * @allow (create) User with matching userId for the project can create a message.
     * @allow (get, list) Any project member can read messages.
     * @allow (update, delete) Only the message sender can update/delete their own message.
     * @deny (create, update, delete) Prevents unauthorized message creation, modification, or deletion.
     * @principle Enforces project-based access control for messages.
     */
    match /users/{userId}/projects/{projectId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.projectId == projectId;
      allow update: if isExistingOwner(userId) && request.auth.uid == resource.data.senderId;
      allow delete: if isExistingOwner(userId) && request.auth.uid == resource.data.senderId;
    }
  }
}