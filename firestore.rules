/**
 * @fileoverview Firestore Security Rules for ConnectNow application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data, combined with shared access patterns for collaborative resources like chats. It prioritizes security and performance by denormalizing authorization data directly onto documents and leveraging a well-defined hierarchical data structure.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user account information.  Access is restricted to the owning user.
 * - /user_profiles/{profileId}: Stores public user profile information.
 * - /users/{userId}/projects/{projectId}: Stores project data owned by a specific user. Access is restricted to the project owner.
 * - /chats/{chatId}: Stores chat metadata.  Access is based on the participants list within the chat document.
 * - /chats/{chatId}/messages/{messageId}: Stores messages within a specific chat. Access is controlled by the parent chat's participants.
 * - /statuses/{statusId}: Stores status posts.
 * - /channels/{channelId}: Stores channel metadata.
 * - /channels/{channelId}/messages/{messageId}: Stores messages within a channel.
 * - /users/{userId}/callLogs/{callLogId}: Stores call logs owned by a specific user. Access is restricted to the call log owner.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents and related subcollections.
 * - Read access to the /statuses collection is public.
 * - Write access to the /statuses collection is restricted to authenticated users.
 * - Chat access is based on explicit membership in the participants list of the chat document.
 * - Listing of call logs is restricted to the owning user.
 *
 * Denormalization for Authorization:
 * - The `Project` entity has a `userId` field that duplicates the user ID from the path. This denormalization allows for efficient ownership checks without additional reads.
 * - The `Chat` entity contains a `participants` array which is a denormalized list of user IDs. This removes the need for complex queries to determine who has access to the chat and its messages.
 * - The `Status` entity has `userName` and `userAvatar` fields to avoid needing to look up user info.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own user document.
     *   request.auth.uid == 'user_abc' && request.resource.data.id == 'user_abc'
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, or delete their own user document.
     *   request.auth.uid == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' cannot create a user document with ID 'user_abc'.
     *   request.auth.uid == 'user_xyz' && request.resource.data.id == 'user_abc'
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete user document with ID 'user_abc'.
     *   request.auth.uid == 'user_xyz'
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to user profile documents.
     * @path /user_profiles/{profileId}
     * @allow (create) - Any authenticated user can create a profile.
     *   request.auth.uid != null
     * @allow (get, list) - Any user can read any profile.
     *   true
     * @allow (update) - Any authenticated user can update any profile.
     *   request.auth.uid != null
     * @allow (delete) - No one can delete a profile
     *   false
     * @principle User profile is publicly readable but protected from deletion.
     */
    match /user_profiles/{profileId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to project documents based on user ownership.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) - User with UID 'user_abc' can create a project under their user document.
     *   request.auth.uid == 'user_abc' && request.resource.data.userId == 'user_abc'
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, or delete a project under their user document.
     *   request.auth.uid == 'user_abc' && resource.data.userId == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' cannot create a project under user 'user_abc'.
     *   request.auth.uid == 'user_xyz' && request.resource.data.userId == 'user_abc'
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete a project under user 'user_abc'.
     *   request.auth.uid == 'user_xyz' && resource.data.userId == 'user_abc'
     * @principle Enforces user ownership for all operations on project documents.
     */
    match /users/{userId}/projects/{projectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/projects/$(projectId));
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to chat documents based on the participants list.
     * @path /chats/{chatId}
     * @allow (create) - Any authenticated user can create a chat.
     *   request.auth.uid != null
     * @allow (get, list) - User with UID 'user_abc' can read chat document if they are in the 'participants' list.
     *   request.auth.uid == 'user_abc' && 'user_abc' in resource.data.participants
     * @allow (update) - User with UID 'user_abc' can update chat document if they are in the 'participants' list.
     *   request.auth.uid == 'user_abc' && 'user_abc' in resource.data.participants
     * @allow (delete) - No one can delete a chat document.
     *   false
     * @deny (get, list, update) - User with UID 'user_xyz' cannot read or update chat document if they are NOT in the 'participants' list.
     *   request.auth.uid == 'user_xyz' && !('user_xyz' in resource.data.participants)
     * @principle Enforces shared access based on membership in the chat's participants list.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatId) {
          return request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      }
      
      allow get, list: if isParticipant(chatId);
      allow create: if isSignedIn();
      allow update: if isParticipant(chatId);
      allow delete: if false;
    }

    /**
     * @description Grants access to message documents within a chat based on the chat's participants.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (create) - User with UID 'user_abc' can create message in chat if they are a participant
     *   request.auth.uid == 'user_abc' && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
     * @allow (get, list) - User with UID 'user_abc' can read message in chat if they are a participant
     *   request.auth.uid == 'user_abc' && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
     * @allow (update) - No one can update a message document.
     *   false
     * @allow (delete) - No one can delete a message document.
     *   false
     * @deny (create, get, list) - User with UID 'user_xyz' cannot create, read, or list messages if they are NOT a participant of the chat.
     *   request.auth.uid == 'user_xyz' && !get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
     * @principle Enforces shared access to messages based on membership in the parent chat's participants list.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isChatParticipant(chatId) {
        return isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
      
      allow get, list: if isChatParticipant(chatId);
      allow create: if isChatParticipant(chatId);
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Grants public read access to statuses and restricts write access to authenticated users.
      * @path /statuses/{statusId}
      * @allow (get, list) - Any user can read a status.
      *   true
      * @allow (create) - Authenticated user can create statuses.
      *   request.auth.uid != null
      * @allow (update) - No one can update a status.
      *   false
      * @allow (delete) - No one can delete a status.
      *   false
      * @principle Allows public read access with owner-only writes and prevents unauthorized deletion.
      */
    match /statuses/{statusId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Grants access to channel documents.
     * @path /channels/{channelId}
     * @allow (create) - User can create a channel if signed in.
     *   request.auth.uid != null
     * @allow (get, list) - Anyone can read channel documents.
     *   true
     * @allow (update) - No one can update a channel.
     *   false
     * @allow (delete) - No one can delete a channel.
     *   false
     */
    match /channels/{channelId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to messages within a channel.
     * @path /channels/{channelId}/messages/{messageId}
     * @allow (create) - User can create a message in a channel if signed in.
     *   request.auth.uid != null
     * @allow (get, list) - Anyone can read messages in a channel.
     *   true
     * @allow (update) - No one can update a message in a channel.
     *   false
     * @allow (delete) - No one can delete a message in a channel.
     *   false
     */
    match /channels/{channelId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to call logs based on user ownership.
     * @path /users/{userId}/callLogs/{callLogId}
     * @allow (create) - User with UID 'user_abc' can create a call log under their user document.
     *   request.auth.uid == 'user_abc'
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, or delete a call log under their user document.
     *   request.auth.uid == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' cannot create a call log under user 'user_abc'.
     *   request.auth.uid == 'user_xyz'
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete a call log under user 'user_abc'.
     *   request.auth.uid == 'user_xyz'
     * @principle Enforces user ownership for all operations on call log documents.
     */
    match /users/{userId}/callLogs/{callLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/callLogs/$(callLogId));
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}