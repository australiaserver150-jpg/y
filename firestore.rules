/**
 * @file Firebase Security Rules for ConnectNow Application
 *
 * @Core Philosophy: This ruleset prioritizes user data protection and access control.
 *   It enforces a strict user-ownership model for personal data and uses role-based access
 *   for collaborative resources. Public data is carefully managed in top-level collections
 *   with clear ownership.  The goal is secure prototyping and rapid iteration.
 *
 * @Data Structure:
 *   - /users/{userId}: Stores private user account data, accessible only to the owner.
 *   - /user_profiles/{profileId}: Stores public user profile data, accessible to all users.
 *   - /users/{userId}/projects/{projectId}: Stores projects owned by a specific user.
 *   - /chats/{chatId}: Stores chat metadata, accessible to chat participants.
 *   - /chats/{chatId}/messages/{messageId}: Stores messages within a chat, accessible to chat participants.
 *   - /statuses/{statusId}: Stores status posts, publicly readable but writable only by the owner.
 *   - /channels/{channelId}: Stores channel metadata, accessible to channel members and the owner.
 *   - /channels/{channelId}/messages/{messageId}: Stores messages within a channel, accessible to channel members.
 *   - /callLogs/{callLogId}: Stores call log data, accessible to participants.
 *
 * @Key Security Decisions:
 *   - User listing is disabled to protect privacy.
 *   - Read-only collections may be publicly accessible, but with owner-only writes.
 *   - Ambiguous relationships default to the most secure interpretation (owner-only access).
 *
 * @Denormalization for Authorization:
 *   - Chat documents denormalize participant information directly onto the document to avoid needing `get()` calls.
 *   - Status documents denormalize user information to avoid needing extra lookups.
 *   - Project documents store the owning `userId` directly on the document.
 *   - CallLogs store `participantInfo` and `participantIds` to avoid extra lookups when displaying the list.
 *
 * @Structural Segregation:
 *   - User data and profile data are stored in separate collections to enable different access controls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Secure user accounts, allowing only the owner to read and write their own data.
     * @path: /users/{userId}
     * @allow: (create) - User with UID 'user_abc' can create their own user document at /users/user_abc.
     * @deny: (create) - User with UID 'user_def' cannot create a user document at /users/user_abc.
     * @principle: Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Secure user profiles, allowing anyone to read, but only the owner to modify.
     * @path: /user_profiles/{profileId}
     * @allow: (get) - Any user can read any user profile.
     * @allow: (update) - User with UID 'user_abc' can update their own profile at /user_profiles/user_abc if authenticated.
     * @deny: (update) - User with UID 'user_def' cannot update the profile at /user_profiles/user_abc.
     * @principle: Enforces document ownership for writes, allows public read access.
     */
    match /user_profiles/{profileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(profileId) {
        return request.auth.uid == profileId;
      }

      function isExistingOwner(profileId) {
        return isOwner(profileId) && exists(/databases/$(database)/documents/user_profiles/$(profileId));
      }

      allow get: if true;
      allow list: if false; // User profile listing is not allowed.
      allow create: if isSignedIn() && isOwner(profileId);
      allow update: if isSignedIn() && isExistingOwner(profileId);
      allow delete: if isSignedIn() && isExistingOwner(profileId);
    }

    /**
     * @description: Secure projects, allowing only the project owner to manage their projects.
     * @path: /users/{userId}/projects/{projectId}
     * @allow: (get) - User with UID 'user_abc' can read their project at /users/user_abc/projects/project_123.
     * @allow: (create) - User with UID 'user_abc' can create a project at /users/user_abc/projects/project_123.
     * @deny: (update) - User with UID 'user_def' cannot update the project at /users/user_abc/projects/project_123.
     * @principle: Enforces document ownership for writes, restricts access to a user's own project data.
     */
    match /users/{userId}/projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/projects/$(projectId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Secure chats, allowing only chat participants to read and write messages.
     * @path: /chats/{chatId}
     * @allow: (get) - User with UID 'user_abc' can read chat /chats/chat_123 if they are a participant.
     * @allow: (create) - User with UID 'user_abc' can create a new chat /chats/chat_123 if authenticated.
     * @deny: (update) - User with UID 'user_def' cannot update the chat /chats/chat_123 if they are not a participant.
     * @principle: Enforces shared access for chat participants.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }

      function isExistingParticipant() {
        return isSignedIn() && exists(/databases/$(database)/documents/chats/$(chatId)) && request.auth.uid in resource.data.participants;
      }

      allow get: if isSignedIn() && isParticipant();
      allow list: if isSignedIn(); // Any signed-in user can see the list of chats.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingParticipant();
      allow delete: if false; // Deleting chats is not allowed.
    }

    /**
     * @description: Secure messages within a chat, allowing only chat participants to read and write.
     * @path: /chats/{chatId}/messages/{messageId}
     * @allow: (get) - User with UID 'user_abc' can read message /chats/chat_123/messages/message_456 if they are a participant in chat_123.
     * @allow: (create) - User with UID 'user_abc' can create a message in /chats/chat_123/messages/message_456 if they are a participant in chat_123.
     * @deny: (update) - User with UID 'user_def' cannot update the message /chats/chat_123/messages/message_456 if they are not a participant in chat_123.
     * @principle: Enforces shared access for chat participants for messages.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }

      allow get: if isSignedIn() && isParticipant(chatId);
      allow list: if false; // Listing messages is not allowed.
      allow create: if isSignedIn() && isParticipant(chatId);
      allow update: if false; // Messages cannot be updated.
      allow delete: if false; // Messages cannot be deleted.
    }

    /**
     * @description: Secure status posts, allowing public read access but only the owner can write.
     * @path: /statuses/{statusId}
     * @allow: (get) - Any user can read any status post.
     * @allow: (create) - User with UID 'user_abc' can create a status post at /statuses/status_123 with authorId 'user_abc'.
     * @deny: (update) - User with UID 'user_def' cannot update the status post at /statuses/status_123.
     * @principle: Enforces document ownership for writes, allows public read access.
     */
    match /statuses/{statusId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

       function isExistingOwner(authorId) {
        return isOwner(authorId) && exists(/databases/$(database)/documents/statuses/$(statusId));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description: Secure channels, allowing members and the owner to manage the channel.
     * @path: /channels/{channelId}
     * @allow: (get) - User with UID 'user_abc' can read channel /channels/channel_123 if they are a member.
     * @allow: (create) - User with UID 'user_abc' can create a new channel /channels/channel_123 if authenticated.
     * @deny: (update) - User with UID 'user_def' cannot update the channel /channels/channel_123 if they are not a member.
     * @principle: Enforces shared access for channel members and owner.
     */
    match /channels/{channelId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isMember() {
        return request.auth.uid in resource.data.memberIds;
      }

      function isOwner(ownerId) {
          return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
          return isOwner(ownerId) && exists(/databases/$(database)/documents/channels/$(channelId));
      }

      allow get: if isSignedIn() && (isMember() || isOwner(resource.data.ownerId));
      allow list: if isSignedIn(); // Any signed-in user can see the list of channels.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isMember() || isExistingOwner(resource.data.ownerId));
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description: Secure messages within a channel, allowing only channel members to read and write.
     * @path: /channels/{channelId}/messages/{messageId}
     * @allow: (get) - User with UID 'user_abc' can read message /channels/channel_123/messages/message_456 if they are a member of channel_123.
     * @allow: (create) - User with UID 'user_abc' can create a message in /channels/channel_123/messages/message_456 if they are a member of channel_123.
     * @deny: (update) - User with UID 'user_def' cannot update the message /channels/channel_123/messages/message_456 if they are not a member of channel_123.
     * @principle: Enforces shared access for channel members for messages.
     */
    match /channels/{channelId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isMember(channelId) {
        return request.auth.uid in get(/databases/$(database)/documents/channels/$(channelId)).data.memberIds;
      }

      allow get: if isSignedIn() && isMember(channelId);
      allow list: if false; // Listing messages is not allowed.
      allow create: if isSignedIn() && isMember(channelId);
      allow update: if false; // Messages cannot be updated.
      allow delete: if false; // Messages cannot be deleted.
    }

    /**
     * @description: Secure call logs, allowing only participants to read.
     * @path: /callLogs/{callLogId}
     * @allow: (get) - User with UID 'user_abc' can read call log /callLogs/call_123 if they are a participant.
     * @deny: (create) - No one can create call logs directly through the client.
     * @deny: (update) - No one can update call logs directly through the client.
     * @principle: Enforces shared access for participants.
     */
    match /callLogs/{callLogId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
        return request.auth.uid in resource.data.participantIds;
      }

      allow get: if isSignedIn() && isParticipant();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}