
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the ConnectNow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "The user's username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "profileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: User 1:1 UserProfile)"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "profileId"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "displayName": {
          "type": "string",
          "description": "The user's display name."
        },
        "avatarUrl": {
          "type": "string",
          "description": "URL of the user's avatar image.",
          "format": "uri"
        },
        "bio": {
          "type": "string",
          "description": "A short biography of the user."
        }
      },
      "required": [
        "id",
        "displayName"
      ]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within ConnectNow.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "googleAnalyticsEnabled": {
          "type": "boolean",
          "description": "Indicates whether Google Analytics is enabled for this project."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Project)"
        }
      },
      "required": [
        "id",
        "name",
        "userId"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a message in the real-time chat.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Message entity."
        },
        "senderId": {
          "type": "string",
          "description": "Reference to User who sent the message. (Relationship: User 1:N Message)"
        },
        "content": {
          "type": "string",
          "description": "The content of the message."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp when the message was sent.",
          "format": "date-time"
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N Message)"
        }
      },
      "required": [
        "id",
        "senderId",
        "content",
        "timestamp",
        "projectId"
      ]
    }
  },
  "auth": {
    "providers": [
      "google"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user account information. Uses path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/user_profiles/{profileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. profileId corresponds to the id of the user's profile.",
          "params": [
            {
              "name": "profileId",
              "description": "The unique identifier of the user profile."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project information. Each project is owned by a user, as indicated by the userId and stored in the project document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Stores messages associated with a project.  Includes denormalized 'projectId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the project."
            },
            {
              "name": "projectId",
              "description": "The unique identifier of the project to which the message belongs."
            },
            {
              "name": "messageId",
              "description": "The unique identifier of the message."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability, following the specified design principles. It leverages path-based ownership for user-specific data and denormalization to avoid hierarchical authorization dependencies. \n\n*   **Users and UserProfiles:** User data and profiles are separated into distinct collections. Each user has a dedicated document in `/users/{userId}` and a corresponding profile in `/user_profiles/{profileId}`. The `User` document contains the `profileId` to establish the 1:1 relationship. This approach uses Structural Segregation, avoiding mixing data with different access requirements in the same collection.\n*   **Projects:** Each user can own multiple projects, structured using path-based ownership under `/users/{userId}/projects/{projectId}`. The `Project` entity includes a `userId` to reference the owning user, reinforcing ownership. This also avoids the need to query across collections to get project data.  Google Analytics setting resides within the `Project` document itself, adhering to predictability within the schema.\n*   **Messages:**  Messages are nested under the projects they belong to at `/users/{userId}/projects/{projectId}/messages/{messageId}`. Each message contains the `senderId` and `projectId` so that rules can validate that the sender is the owner of the parent project.  This structure supports the real-time chat feature while maintaining clear ownership and authorization. This structure enables secure `list` operations within a project.\n\nThis design enables Authorization Independence because all authorization is based on the current user's `uid` and the explicit `userId` stored within the documents. There are no `get()` calls needed to determine access, as the necessary context is either derived from the path or included in the document itself. The hierarchical structure, combined with denormalization, supports QAPs by enabling secure list operations at each level.  For example, listing messages within a project only requires checking the user's ownership of the parent project, not individual message permissions."
  }
}
