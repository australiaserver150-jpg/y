{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the ConnectNow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "profilePictureUrl": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user profile was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "createdAt"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a single chat message.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatMessage entity."
        },
        "senderId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ChatMessage) The ID of the user who sent the message."
        },
        "content": {
          "type": "string",
          "description": "The text content of the message."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the message was sent.",
          "format": "date-time"
        },
        "chatRoomId": {
          "type": "string",
          "description": "Reference to ChatRoom. (Relationship: ChatRoom 1:N ChatMessage) The ID of the chat room this message belongs to."
        }
      },
      "required": [
        "id",
        "senderId",
        "content",
        "timestamp",
        "chatRoomId"
      ]
    },
    "ChatRoom": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatRoom",
      "type": "object",
      "description": "Represents a chat room or conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatRoom entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the chat room (e.g., 'General Chat', or the names of the users in a direct message)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the chat room was created.",
          "format": "date-time"
        },
        "participantIds": {
          "type": "array",
          "description": "References to UserProfiles. (Relationship: ChatRoom N:N UserProfile) List of user IDs participating in this chat room.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "createdAt",
        "participantIds"
      ]
    },
    "SmartReply": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SmartReply",
      "type": "object",
      "description": "Represents a smart reply suggestion generated by the AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the SmartReply entity."
        },
        "chatMessageId": {
          "type": "string",
          "description": "Reference to ChatMessage. (Relationship: ChatMessage 1:N SmartReply) The ID of the chat message this smart reply is suggested for."
        },
        "suggestion": {
          "type": "string",
          "description": "The suggested reply text."
        },
        "confidenceScore": {
          "type": "number",
          "description": "A score (0-1) indicating the AI's confidence in the relevance of this suggestion."
        }
      },
      "required": [
        "id",
        "chatMessageId",
        "suggestion",
        "confidenceScore"
      ]
    },
    "AnalyticsEvent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AnalyticsEvent",
      "type": "object",
      "description": "Represents an analytics event tracked in the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AnalyticsEvent entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N AnalyticsEvent) The ID of the user who triggered the event."
        },
        "eventType": {
          "type": "string",
          "description": "The type of event (e.g., 'messageSent', 'profileViewed')."
        },
        "eventData": {
          "type": "string",
          "description": "JSON string containing additional data related to the event."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the event occurred.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "eventType",
        "eventData",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "google"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profiles. Path-based ownership ensures only the user can modify their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/chatRooms/{chatRoomId}",
        "definition": {
          "entityName": "ChatRoom",
          "schema": {
            "$ref": "#/backend/entities/ChatRoom"
          },
          "description": "Stores chat room metadata. Includes denormalized 'participantIds' array for authorization independence.  Security rules check if the requesting user's UID is in this array.",
          "params": [
            {
              "name": "chatRoomId",
              "description": "The unique identifier of the chat room."
            }
          ]
        }
      },
      {
        "path": "/chatRooms/{chatRoomId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages within a chat room. Access is controlled by the parent chat room's 'participantIds'.",
          "params": [
            {
              "name": "chatRoomId",
              "description": "The unique identifier of the chat room."
            },
            {
              "name": "messageId",
              "description": "The unique identifier of the chat message."
            }
          ]
        }
      },
      {
        "path": "/chatRooms/{chatRoomId}/messages/{messageId}/smartReplies/{smartReplyId}",
        "definition": {
          "entityName": "SmartReply",
          "schema": {
            "$ref": "#/backend/entities/SmartReply"
          },
          "description": "Stores smart reply suggestions for a chat message. Access is controlled by the parent chat message and chat room.",
          "params": [
            {
              "name": "chatRoomId",
              "description": "The unique identifier of the chat room."
            },
            {
              "name": "messageId",
              "description": "The unique identifier of the chat message."
            },
            {
              "name": "smartReplyId",
              "description": "The unique identifier of the smart reply."
            }
          ]
        }
      },
      {
        "path": "/analyticsEvents/{analyticsEventId}",
        "definition": {
          "entityName": "AnalyticsEvent",
          "schema": {
            "$ref": "#/backend/entities/AnalyticsEvent"
          },
          "description": "Stores analytics events.  No user-based authorization required at the document level.",
          "params": [
            {
              "name": "analyticsEventId",
              "description": "The unique identifier of the analytics event."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support a real-time chat application with user profiles, smart reply suggestions, and analytics. It prioritizes authorization independence by denormalizing participant information into the chat rooms. This eliminates the need for `get()` calls in security rules when accessing chat messages or smart replies within a room, enabling atomic operations and improving security rule performance.\n\n*   **User Profiles:** Stored in a `users` collection using path-based ownership (`/users/{userId}`).\n*   **Chat Rooms:** Stored in the `chatRooms` collection. The `participantIds` array within each chat room is crucial. Security rules will check if `request.auth.uid` exists in this array to authorize access to the chat room and its associated messages and smart replies.  This `participantIds` array is DENORMALIZED for authorization independence.\n*   **Chat Messages:** Stored as a subcollection under each chat room (`/chatRooms/{chatRoomId}/messages/{messageId}`). The security rules can efficiently check if the user is a participant of the chat room before allowing access to messages.\n*   **Smart Replies:** Stored as a subcollection under each chat message (`/chatRooms/{chatRoomId}/messages/{messageId}/smartReplies/{smartReplyId}`).  Access is controlled based on the parent chat message and thus the `chatRoomId`.\n*   **Analytics Events:** Stored in the `analyticsEvents` collection, separated from user-owned data to ensure only authorized services can write to this collection. The userId is included for analysis but authorization is managed at the collection level.\n\nThis structure supports the required QAPs (Rules are not Filters) by ensuring that list operations on messages and smart replies are secure. Listing messages requires being a participant in the `chatRoom`, which is checked via the denormalized `participantIds` array in the `chatRoom` document."
  }
}
    