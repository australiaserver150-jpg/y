{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the ConnectNow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "The user's display name."
        },
        "profilePictureUrl": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "bio": {
          "type": "string",
          "description": "A short biography of the user."
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "displayName"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a chat message sent between users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatMessage entity."
        },
        "senderId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ChatMessage - Sender)"
        },
        "recipientId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ChatMessage - Recipient)"
        },
        "content": {
          "type": "string",
          "description": "The content of the chat message."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "senderId",
        "recipientId",
        "content",
        "timestamp"
      ]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within the ConnectNow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "ownerId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Project)"
        },
        "googleAnalyticsEnabled": {
          "type": "boolean",
          "description": "Indicates whether Google Analytics is enabled for this project."
        }
      },
      "required": [
        "id",
        "name",
        "ownerId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/profile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. Path-based ownership ensures only the user can access their profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "messageId",
              "description": "The unique identifier of the message."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project data. Includes the 'ownerId' field for authorization independence.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores references to projects owned by a specific user. Enables efficient listing of user-owned projects. Project ID is duplicated here for optimized retrieval. ",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "projectId",
              "description": "The unique identifier of the project."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to address the 'auth/operation-not-allowed' error, which typically indicates an issue with Firebase Authentication configuration or security rules. Given the provided application entities (UserProfile, ChatMessage, Project) and the principle of Authorization Independence, the structure prioritizes denormalization to avoid complex `get()` calls in security rules. Path-based ownership is used where applicable, and membership maps are utilized for collaborative data. This approach ensures that security rules are clear, maintainable, and efficient.\n\nThe structure includes the following collections:\n\n*   `/users/{userId}/profile`: Stores user profile data. This uses path-based ownership for simplicity and security. No denormalization is needed here as only the user can access their own profile data.\n*   `/users/{userId}/messages/{messageId}`: Stores chat messages. This uses path-based ownership. No denormalization is needed here as only the user can access their own messages.\n*   `/projects/{projectId}`: Stores project data. The `ownerId` is stored within the project document for easy access and to enable listing projects owned by a user.\n*   `/users/{userId}/projects/{projectId}`: This collection is maintained for listing and managing projects owned by a specific user. It contains a reference to the project in `/projects/{projectId}`. Duplicating project ID here is useful for quickly listing projects of a user.\n\nThis design ensures Authorization Independence by avoiding `get()` calls in security rules. For example, project ownership is explicitly stored in the `/projects/{projectId}` document, eliminating the need to fetch user data to determine ownership. The segregation of data into user-specific collections (e.g., `/users/{userId}/profile`) further simplifies security rules.\n\nTo support secure `list` operations (QAPs), the structure leverages path-based ownership and the explicit storage of ownership information. For example, listing projects owned by a user can be done securely by querying the `/users/{userId}/projects/{projectId}` collection. Rules will validate that `request.auth.uid == userId`.\n"
  }
}